
#include <objects.hpp>

S_Object* S_Object::operator[](string key) {
    if (S_Properties.count(key) == 0) {
        return nullptr;
    }

    return S_Properties[key];
}

void S_Object::Ref() {
    S_Handle->RefCount++;
}

void S_Object::Unref() {
    S_Handle->RefCount--;
}

template <class T>
T* S_GC::Alloc() {
    T* obj = new T();

    S_GCHandle* handle = new S_GCHandle();

    obj.S_Handle = handle;

    handle->Object = obj;
    handle->RefCount = 1;

    handle->Next = nullptr;

    if (First == nullptr)
        First = Handle;

    if (Last != nullptr)
        Last->Next = handle;
    
    handle->Prev = Last;
    
    Last = handle;

    return obj;
}

void S_GC::Sweep() {
    S_GCHandle* handle = First;

    // Generated by github copilot, unsure if correct and not at the stage to test.
    while (handle != nullptr) {
        if (handle->RefCount == 0) {
            if (handle->Next != nullptr)
                handle->Next->Prev = handle->Prev;

            if (handle->Prev != nullptr)
                handle->Prev->Next = handle->Next;

            if (handle == First)
                First = handle->Next;

            if (handle == Last)
                Last = handle->Prev;

            delete handle->Object;
            delete handle;
        }

        handle = handle->Next;
    }
}